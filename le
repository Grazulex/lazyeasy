#!/bin/bash

# Couleurs ANSI
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RESET='\033[0m'

CMD="$1"
ARG1="$2"
ARG2="$3"
ARG3="$4"

# looking in the direction and subdirecties to find the database file
DB_FILE=$(find . -type f -name "*.sqlite" | head -n 1)

# Fonction : récupérer colonnes réelles d'une table
get_actual_columns() {
  local db_file="$1"
  local table="$2"
  sqlite3 "$db_file" "PRAGMA table_info($table);" | awk -F'|' '{print $2}'
}

# Fonction : valider que chaque colonne demandée existe
validate_columns() {
  local db_file="$1"
  local table="$2"
  local input_columns="$3"

  local actual_columns
  IFS=$'\n' read -d '' -r -a actual_columns < <(get_actual_columns "$db_file" "$table" && printf '\0')

  IFS=',' read -ra input_cols <<<"$input_columns"

  for col in "${input_cols[@]}"; do
    local found=false
    for actual in "${actual_columns[@]}"; do
      if [[ "$actual" == "$col" ]]; then
        found=true
        break
      fi
    done
    if [ "$found" = false ]; then
      echo -e "${RED}❌ Unknown column: '$col' in table '$table'.${RESET}"
      echo -e "${YELLOW}Available columns:${RESET} ${actual_columns[*]}"
      exit 1
    fi
  done
}

case "$CMD" in
init)
  mkdir -p "$ARG1" && git -C "$ARG1" init >/dev/null 2>&1
  echo -e "${GREEN}✔ Project '$ARG1' initialized with Git.${RESET}"
  echo "cd $ARG1"
  ;;

clone)
  git clone "$ARG1" >/dev/null 2>&1
  REPO_NAME=$(basename "$ARG1" .git)
  echo -e "${GREEN}✔ Repo '$REPO_NAME' cloned.${RESET}"
  echo "cd $REPO_NAME"
  ;;

composer)
  mkdir -p "$ARG1" && cd "$ARG1" && composer init --name="$ARG1" >/dev/null 2>&1
  echo -e "${GREEN}✔ Composer project '$ARG1' initialized.${RESET}"
  echo "cd $ARG1"
  ;;

push)
  git add . && git commit -m "$ARG1" && git push
  echo -e "${GREEN}✔ Code pushed with message :$RESET \"$ARG1\""
  ;;

db:tables)
  if [ ! -f "$DB_FILE" ]; then
    echo -e "${RED}❌ File '$DB_FILE' not found.${RESET}"
    exit 1
  fi

  echo -e "${GREEN}✔ Tables in the database :${RESET}"
  sqlite3 "$DB_FILE" ".tables"
  ;;

db:columns)
  TABLE="$ARG1"

  if [ -z "$TABLE" ]; then
    echo -e "${RED}❌ Usage : le:db:columns <table>${RESET}"
    exit 1
  fi

  if [ ! -f "$DB_FILE" ]; then
    echo -e "${RED}❌ File '$DB_FILE' not found.${RESET}"
    exit 1
  fi

  echo -e "${GREEN}✔ Columns of table '$TABLE' :${RESET}"
  get_actual_columns "$DB_FILE" "$TABLE"
  ;;

db:show)
  TABLE="$ARG1"
  LIMIT="$ARG2"
  COLUMNS="$ARG3"

  if [ -z "$LIMIT" ]; then
    echo -e "${RED}❌ Usage : le:db:show <table> <limit> [columns]${RESET}"
    exit 1
  fi

  if [ ! -f "$DB_FILE" ]; then
    echo -e "${RED}❌ File '$DB_FILE' not found.${RESET}"
    exit 1
  fi

  if [ -z "$COLUMNS" ]; then
    COLUMNS="*"
  else
    validate_columns "$DB_FILE" "$TABLE" "$COLUMNS"
  fi

  echo -e "${YELLOW}Last $LIMIT records of '$TABLE' (columns : $COLUMNS) :${RESET}"
  sqlite3 "$DB_FILE" "SELECT $COLUMNS FROM $TABLE ORDER BY rowid DESC LIMIT $LIMIT;"
  ;;

*)
  echo -e "${YELLOW}LazyEasy – commands :${RESET}
  ${GREEN}init <name>                    ${RESET} → New directory + git init + cd
  ${GREEN}clone <repo_url>               ${RESET} → Clone repo Git + cd
  ${GREEN}composer <name>                ${RESET} → New project Composer + cd
  ${GREEN}push <message>                 ${RESET} → Git add, commit, push
  ${GREEN}db:tables                      ${RESET} → Show tables of database SQLite
  ${GREEN}db:columns <table>             ${RESET} → Show columns of table SQLite
  ${GREEN}db:show <table> <n> [columns]  ${RESET} → Show last n records of table SQLite
"
  ;;
esac
